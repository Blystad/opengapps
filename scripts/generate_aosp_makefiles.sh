#!/bin/bash -e
ARCH="$1"
API="$2"
VARIANT="$3"
VENDOR_PATH=vendor/opengapps
VENDOR_ABSOLUTE_PATH="${ANDROID_BUILD_TOP}/${VENDOR_PATH}"
SOURCES="${VENDOR_ABSOLUTE_PATH}/sources"
TOP="${VENDOR_ABSOLUTE_PATH}/build"
SCRIPTS="$TOP/scripts"
OUT="$VENDOR_ABSOLUTE_PATH/out"
build=$OUT

AUTOGENERATED_MAKEFILE_TEXT="Auto-generated Makefile from OpenGapps. Do not modify."

. "$SCRIPTS/inc.aromadata.sh"
. "$SCRIPTS/inc.buildhelper.sh"
. "$SCRIPTS/inc.buildtarget.sh"
. "$SCRIPTS/inc.compatibility.sh"
. "$SCRIPTS/inc.installdata.sh"
. "$SCRIPTS/inc.packagetarget.sh"
. "$SCRIPTS/inc.updatebinary.sh"
. "$SCRIPTS/inc.tools.sh"

install_lib() {
  sourceapk="$1"
  targetdir="$2"
  libpath="$3"
  libsearchpath="$4"

  module_name="$(basename "$targetdir")"
  module_path="$(get_module_path $module_name)"
  libs_file="$module_path/libs.mk"
  mkdir -p "$module_path"

  LIBS=$(zipinfo -1 "$sourceapk" | grep "$libsearchpath" | grep -v -E "*/crazy.*")
  echo "INFO: $module_name: install_lib: $(echo $LIBS | tr '\n' ',')"
  for lib in $LIBS; do
    # The @ before $lib will make the AOSP build system automatically extract the library from the APK.
    echo "@$lib" >> "$libs_file"
  done
}

get_module_path() {
  module=$1
  echo "${OUT}/${module}"
}

relative_to_dir() {
  echo "$1" | sed 's|.*'$2'/|'$2'/|g'
}

relative_to_vendor() {
  echo $1 | sed 's|'$VENDOR_ABSOLUTE_PATH'|'$VENDOR_PATH'|g'
}

buildapk() {
    sourceapk="$1"
    targetdir="$2"

    module_name=$(basename $targetdir)
    module_dir=$(basename $(dirname $targetdir))

    if [[ "$sourceapk" != *"nodpi"* ]]; then
      echo "WARN: $(relative_to_vendor $sourceapk): is not NODPI...ignoring"
      return
    fi

    module_path=$(get_module_path $module_name)
    mkdir -p "$module_path"

    # Ensure that libs.mk exists, otherwise the Android.mk file will fail.
    touch "$module_path/libs.mk"

    cat << EOF > "$module_path/Android.mk"
# ${AUTOGENERATED_MAKEFILE_TEXT}
# LOCAL_PATH as a dot is necessary to use paths relative to ANDROID_BUILD_TOP
LOCAL_PATH := .
include \$(CLEAR_VARS)

LOCAL_MODULE := ${module_name}
LOCAL_MODULE_TAGS := optional
LOCAL_MODULE_CLASS := APPS
LOCAL_MODULE_SUFFIX := \$(COMMON_ANDROID_PACKAGE_SUFFIX)
LOCAL_MODULE_PATH := \$(PRODUCT_OUT)/system/${module_dir}
LOCAL_SRC_FILES := $(relative_to_vendor $sourceapk)
LOCAL_CERTIFICATE := PRESIGNED
LOCAL_PREBUILT_JNI_LIBS := \$(shell cat $(relative_to_vendor "${module_path}/libs.mk"))

# include per-module customizations, if it exists
-include $(relative_to_vendor "$TOP/aosp/custom/$module_name.mk")

include \$(BUILD_PREBUILT)
EOF

    echo "INFO: generated $module_name ( $(relative_to_vendor "$sourceapk") )"
}

function copy() {
    path=$1
    if [[ -d "$path" ]]; then
      for file in $(find $path -type f); do
        copy $file $2
      done
    else
      directory=$(echo $2 | sed 's/.*common\///g' | sed 's|/*$||')
      path_rel_vendor=$(relative_to_vendor $path)
      path_rel_dir=$(relative_to_dir "$path_rel_vendor" "$directory")
      echo "${path_rel_vendor}:system/$path_rel_dir" >> $OUT/product_copy_files.txt
    fi
}


# Generate a Android.mk file for the requested Google Apps.
function generate_apps_makefile {
  for app in $gapps_list; do
      get_package_info "$app"
      if [ -n "$packagename" ]; then
          buildapp "$packagename" "$packagetype/$app" "$packagetarget"
      fi
  done
}

# Generate the makefile for copying Gapps files
function generate_copy_makefile {
  for app in $gapps_list; do
      get_package_info "$app"
      for file in $packagefiles; do
          buildfile "$packagetype/$app/common" "$file"
      done
  done

  FRAMEWORK_COPY_MAKEFILE=$OUT/AndroidProducts.mk
  echo "INFO: Generating ${FRAMEWORK_COPY_MAKEFILE}"
  mkdir -p $(dirname $FRAMEWORK_COPY_MAKEFILE)
  echo "# ${AUTOGENERATED_MAKEFILE_TEXT}" > $FRAMEWORK_COPY_MAKEFILE
  cat $OUT/product_copy_files.txt | xargs -I X echo "PRODUCT_COPY_FILES += X" >> $FRAMEWORK_COPY_MAKEFILE
}

function cleanup {
  mkdir -p $OUT
  rm $OUT/AndroidProducts.mk 2>/dev/null || true
  rm $OUT/product_copy_files.txt 2>/dev/null || true
  rm $OUT/*/*.mk 2>/dev/null || true
}

function create_out_dir_makefile {
  cat << EOF > $OUT/README
This directory contains auto-generated Makefiles for OpenGapps.
EOF
}

function generate_product_packages_makefile {
  echo "# ${AUTOGENERATED_MAKEFILE_TEXT}" > $OUT/product.mk

  for app in $gapps_list; do
      get_package_info "$app"
      if [ -n "$packagename" ]; then
          echo "PRODUCT_PACKAGES += $(basename $packagetarget)" >> $OUT/product.mk
      fi
  done
}

cleanup
create_out_dir_makefile
get_supported_variants "$VARIANT"
get_gapps_list "$supported_variants"
generate_apps_makefile
generate_copy_makefile
generate_product_packages_makefile